#!/usr/bin/env ruby
# frozen_string_literal: true

#
# Copyright (c) 2008-2020, Thomas Hurst <tom@hur.st>
#
# Use of this file is unrestricted provided this notice is retained.
# If you use it, it'd be nice if you dropped me a note.  Also beer.
#
#
# mkjail -- trace an executable, track dependent files, and
#           attempt to produce a minimal functional tree capable
#           of running it in a chroot/jail.
#
# Example usage:
#
#   mkjail /jail/ruby /usr/local/bin/ruby -e 'p "Hello"'
#   chroot /jail/ruby /usr/local/bin/ruby -e 'p "Hello"'
#
# It's been tested successfully with Rails applications, PHP, Apache,
# and various other tools.

require "set"
require "fileutils"
require "pathname"

BASEFILES = %w[
  /libexec/ld-elf.so.1
  /etc/passwd
  /tmp
]

TRACETIME = "20s"

def trace_cmd(cmd)
  puts "Tracing #{cmd} for up to #{TRACETIME}"
  tracefile = `mktemp -t mkjail-#{File.basename(cmd.first)}`.chomp + ".ktrace"
  cmdargs = ["timeout", "20s", "ktrace", "-t", "n", "-if", tracefile, "--", *cmd]
  puts cmdargs.inspect
  system(*cmdargs)
  puts "Trace saved tp #{tracefile}"
  tracefile
end

def detect_files(cmd)
  trace = trace_cmd(cmd)
  files = Set.new
  File.popen(["kdump", "-sf", trace]) do |tr|
    tr
      .each_line
      .map { |line| /(?<pid>\d+)\s+(?<cmd>\S+)\s+(?<type>\S+)\s+"(?<what>.*)"/.match(line) }
      .select { |md| md && md[:type] == "NAMI" } # name lookups
      .map { |md| md[:what] } # paths
      .select { |path| path != "." && File.exist?(path) } # if they exist
      .each { |path| files << path } # add to the list
  end
  files.to_a
ensure
  FileUtils.rm trace
end

def copy_path(source, dest)
  source = Pathname.new(source)
  dest = Pathname.new(dest)

  source.descend do |path|
    target = dest.join(path.relative_path_from("/"))
    next if target.exist?
    stat = path.lstat
    if path.directory?
      puts "MKDIR #{target}"
      target.mkpath
      target.lchmod(stat.mode)
      target.lchown(stat.uid, stat.gid)
    elsif !path.fnmatch?("/dev/*") && (path.file? || path.symlink?)
      puts "CP #{path}"
      FileUtils.copy_entry(path, target)
    else
      puts "SKIP #{path.ftype} #{path}"
    end
  end
end

def copy_tree(files, dest)
  files.each { |source| copy_path(source, dest) }
end

dest = ARGV.shift
unless dest && File.directory?(dest)
  warn "Usage: #{$0} /path/to/jail [command [args]]"
  warn "Ensure the jail directory exists.  Don't forget to add devfs as required."
  exit 1
end
cmd = ARGV

files = detect_files(cmd)
files += BASEFILES

copy_tree(files, dest)

File.open(File.join(dest, ".jail-manifest"), "w") do |f|
  f.puts("# mkjail using command: #{cmd.inspect}")
  f.puts files.join("\n")
end
