#!/usr/bin/env ruby
# frozen_string_literal: true

#
# Copyright (c) 2008-2020, Thomas Hurst <tom@hur.st>
#
# Use of this file is unrestricted provided this notice is retained.
# If you use it, it'd be nice if you dropped me a note.  Also beer.
#
#
# mkjail -- trace an executable, track dependent files, and
#           attempt to produce a minimal functional tree capable
#           of running it in a chroot/jail.
#
# Example usage:
#
#   mkjail ruby-jail.txz /usr/local/bin/ruby -e 'p "Hello"'
#   tar xf ruby-jail.txz /jail/ruby
#   chroot /jail/ruby /usr/local/bin/ruby -e 'p "Hello"'
#
# Note you might want to exclude the device nodes and make a devfs.
#

require "set"
require "pathname"
require "tempfile"

BASEFILES = %w[
  /libexec/ld-elf.so.1
  /etc/passwd
  /tmp
]

TRACETIME = "20s"

def trace_cmd(cmd)
  puts "Tracing #{cmd.inspect} for up to #{TRACETIME}"
  tracefile = Tempfile.new("mkjail")
  cmdargs = ["timeout", "20s", "ktrace", "-t", "n", "-if", tracefile.path, "--", *cmd]
  system(*cmdargs)
  puts "Trace saved to #{tracefile.path}"
  tracefile
end

def detect_files(cmd)
  trace = trace_cmd(cmd)
  files = Set.new
  File.popen(["kdump", "-sf", trace.path]) do |tr|
    tr
      .each_line
      .map { |line| /(?<pid>\d+)\s+(?<cmd>\S+)\s+(?<type>\S+)\s+"(?<what>.*)"/.match(line) }
      .select { |md| md && md[:type] == "NAMI" }
      .map { |md| md[:what] }
      .select { |path| path != "." && File.exist?(path) }
      .map { |path| Pathname.new(path) }
      .each do |path|
        path.descend do |fragment|
          files << fragment.to_s
          files << fragment.realpath.to_s if fragment.symlink?
        end
      end
  end
  files
ensure
  trace.close
  trace.unlink
end

dest, *cmd = ARGV
unless dest && cmd.any?
  warn "Usage: #{$0} archive command [args]"
  exit 1
end

files = detect_files(cmd)
files.merge BASEFILES

begin
  tmp = Tempfile.new("mkjail")
  tmp.write(files.sort.join("\000"))
  tmp.flush
  system "tar", "cvnaf", dest, "--totals", "--null", "-T", tmp.path
ensure
  tmp.close
  tmp.unlink
end
