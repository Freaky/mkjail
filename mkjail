#!/usr/bin/env ruby
# frozen_string_literal: true

#
# Copyright (c) 2008-2020, Thomas Hurst <tom@hur.st>
#
# Use of this file is unrestricted provided this notice is retained.
# If you use it, it'd be nice if you dropped me a note.  Also beer.
#
#
# mkjail -- trace an executable, track dependent files, and
#           attempt to produce a minimal functional tree capable
#           of running it in a chroot/jail.
#
# Example usage:
#
#   mkjail ruby-jail.txz /usr/local/bin/ruby -e 'p "Hello"'
#   tar xf ruby-jail.txz /jail/ruby
#   chroot /jail/ruby /usr/local/bin/ruby -e 'p "Hello"'
#
# Note you might want to exclude the device nodes and make a devfs.
#

require "mkmf"
require "pathname"
require "set"
require "tempfile"

BASEFILES = %w[
  /libexec/ld-elf.so.1
  /etc/passwd
  /tmp
]

TRACETIME = "20s"

def ktrace_nami(cmd)
  warn " == TRACE #{cmd.join " "}"
  warn " == TIMEOUT #{TRACETIME}"
  Tempfile.new("mkjail-trace").tap do |trace|
    trace.close
    at_exit { trace.unlink }
    system("timeout", TRACETIME, "ktrace", "-t", "n", "-if", trace.path, "--", *cmd)
    warn " == EXIT #{$?.exitstatus}"
  end
end

def extract_files(ktrace)
  Set.new.tap do |files|
    File.popen(["kdump", "-sf", ktrace]) do |tr|
      tr
        .each_line # pid, procname, type, details
        .map { |line| line.split(/\s+/, 4).drop(2) }
        .select { |type, _| type == "NAMI" }
        .map { |_, path| Pathname.new(path[1..-1]) }
        .select { |path| path != "." && path.exist? }
        .each do |path|
          path.descend do |fragment|
            files << fragment.to_s
            begin
              files << fragment.realpath.to_s if fragment.symlink?
            rescue Errno::ENOENT, Errno::EACCES
            end
          end
        end
    end
  end
end

dest, *cmd = ARGV
unless dest && cmd.any?
  warn "Usage: #{$0} archive command [args]"
  exit 1
end

# Internal use only? pfft.
path = MakeMakefile.find_executable0(cmd.first)

if path.nil?
  warn "Executable #{cmd.first} not in path"
  exit 1
end
cmd[0] = path

trace = ktrace_nami(cmd)
files = extract_files(trace.path).merge(BASEFILES).add(path)

plist = Tempfile.new("mkjail-files")
at_exit { plist.unlink }
plist.write(files.sort.join("\000"))
plist.close
system "tar", "cvnaf", dest, "--totals", "--null", "-T", plist.path
exit $?.exitstatus
